{"ast":null,"code":"var _jsxFileName = \"/Users/yohav/Desktop/HeroloAssignement/src/components/SearchForm.js\";\nimport React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchWeatherAndForecast } from '../store/actions/currentWeather.actions';\nimport { setSuggestionsStatus } from '../store/actions/cities.actions';\nimport CitySuggestions from './CitySuggestions';\nimport SearchComponent from './SearchComponent';\n\nconst SearchForm = ({\n  citiesList,\n  showSuggestions,\n  closeSuggestions,\n  getLocationWeather\n}) => {\n  const [inputErr, setInputErr] = useState(false);\n  const formRef = useRef();\n\n  const on_submit = e => {\n    e.preventDefault();\n\n    if (!inputErr) {\n      setInputErr(null);\n      closeSuggestions(); // take the first city from the cities list in store\n      // and create city object for sending to the getLocationWeather\n      // function as expected.\n\n      const [cityInfo] = citiesList;\n\n      if (cityInfo) {\n        const city = {\n          cityName: cityInfo.LocalizedName,\n          id: cityInfo.Key\n        };\n        getLocationWeather(city);\n      } else setInputErr('No city Found');\n    }\n\n    e.target.reset(); // reset form\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    ref: formRef,\n    onSubmit: on_submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchComponent, {\n    setInputErr: setInputErr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), inputErr && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 20\n    }\n  }, \" \", inputErr, \" \"), citiesList && showSuggestions ? /*#__PURE__*/React.createElement(CitySuggestions, {\n    formRef: formRef,\n    cities: citiesList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }) : null);\n};\n\nconst mapStateToProps = state => ({\n  citiesList: state.cities.citiesList,\n  showSuggestions: state.cities.isSuggestionShown\n});\n\nconst mapDispatchToProps = dispatch => ({\n  closeSuggestions: () => dispatch(setSuggestionsStatus(false)),\n  getLocationWeather: city => dispatch(fetchWeatherAndForecast(city))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);","map":{"version":3,"sources":["/Users/yohav/Desktop/HeroloAssignement/src/components/SearchForm.js"],"names":["React","useState","useRef","connect","fetchWeatherAndForecast","setSuggestionsStatus","CitySuggestions","SearchComponent","SearchForm","citiesList","showSuggestions","closeSuggestions","getLocationWeather","inputErr","setInputErr","formRef","on_submit","e","preventDefault","cityInfo","city","cityName","LocalizedName","id","Key","target","reset","mapStateToProps","state","cities","isSuggestionShown","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,uBAAT,QAAwC,yCAAxC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,eAAd;AAA+BC,EAAAA,gBAA/B;AAAiDC,EAAAA;AAAjD,CAAD,KAA2E;AAE5F,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMc,OAAO,GAAGb,MAAM,EAAtB;;AACA,QAAMc,SAAS,GAAGC,CAAC,IAAI;AACrBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACL,QAAL,EAAe;AACXC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAH,MAAAA,gBAAgB,GAFL,CAIX;AACA;AACA;;AAEA,YAAM,CAACQ,QAAD,IAAaV,UAAnB;;AACA,UAAIU,QAAJ,EAAc;AACV,cAAMC,IAAI,GAAG;AACTC,UAAAA,QAAQ,EAAEF,QAAQ,CAACG,aADV;AAETC,UAAAA,EAAE,EAAEJ,QAAQ,CAACK;AAFJ,SAAb;AAIAZ,QAAAA,kBAAkB,CAACQ,IAAD,CAAlB;AACH,OAND,MAOKN,WAAW,CAAC,eAAD,CAAX;AACR;;AACDG,IAAAA,CAAC,CAACQ,MAAF,CAASC,KAAT,GArBqB,CAqBJ;AAClB,GAtBD;;AAwBA,sBACE;AAAM,IAAA,GAAG,EAAEX,OAAX;AAAoB,IAAA,QAAQ,EAAEC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,WAAW,EAAEF,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGD,QAAQ,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAOA,QAAP,MAFf,EAIKJ,UAAU,IAAIC,eAAf,gBACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEK,OAA1B;AAAmC,IAAA,MAAM,EAAEN,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAGE,IAPN,CADF;AAYD,CAxCD;;AA0CA,MAAMkB,eAAe,GAAGC,KAAK,KAAK;AAChCnB,EAAAA,UAAU,EAAEmB,KAAK,CAACC,MAAN,CAAapB,UADO;AAEhCC,EAAAA,eAAe,EAAEkB,KAAK,CAACC,MAAN,CAAaC;AAFE,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCrB,EAAAA,gBAAgB,EAAE,MAAMqB,QAAQ,CAAC3B,oBAAoB,CAAC,KAAD,CAArB,CADM;AAEtCO,EAAAA,kBAAkB,EAAEQ,IAAI,IAAIY,QAAQ,CAAC5B,uBAAuB,CAACgB,IAAD,CAAxB;AAFE,CAAL,CAAnC;;AAKA,eAAejB,OAAO,CAACwB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CvB,UAA7C,CAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchWeatherAndForecast } from '../store/actions/currentWeather.actions';\nimport { setSuggestionsStatus } from '../store/actions/cities.actions';\n\nimport CitySuggestions from './CitySuggestions';\nimport SearchComponent from './SearchComponent';\n\nconst SearchForm = ({ citiesList, showSuggestions, closeSuggestions, getLocationWeather }) => {\n\n  const [inputErr, setInputErr] = useState(false);\n  const formRef = useRef();\n  const on_submit = e => {\n    e.preventDefault();\n\n    if (!inputErr) {\n        setInputErr(null);\n        closeSuggestions();\n\n        // take the first city from the cities list in store\n        // and create city object for sending to the getLocationWeather\n        // function as expected.\n\n        const [cityInfo] = citiesList;\n        if (cityInfo) {\n            const city = {\n                cityName: cityInfo.LocalizedName,\n                id: cityInfo.Key\n            }\n            getLocationWeather(city);\n        }\n        else setInputErr('No city Found');\n    }\n    e.target.reset() // reset form\n  }\n\n  return (\n    <form ref={formRef} onSubmit={on_submit}>\n      <SearchComponent setInputErr={setInputErr} />\n      {inputErr && <div> {inputErr} </div>}\n      {\n        (citiesList && showSuggestions) ?\n          <CitySuggestions formRef={formRef} cities={citiesList} />\n          :\n          null\n      }\n    </form>\n  )\n}\n\nconst mapStateToProps = state => ({\n  citiesList: state.cities.citiesList,\n  showSuggestions: state.cities.isSuggestionShown\n});\n\nconst mapDispatchToProps = dispatch => ({\n  closeSuggestions: () => dispatch(setSuggestionsStatus(false)),\n  getLocationWeather: city => dispatch(fetchWeatherAndForecast(city))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm);\n"]},"metadata":{},"sourceType":"module"}