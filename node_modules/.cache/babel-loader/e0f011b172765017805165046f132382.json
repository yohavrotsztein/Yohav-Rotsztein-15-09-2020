{"ast":null,"code":"var _jsxFileName = \"/Users/yohav/Desktop/HeroloAssignement/src/components/CurrentCondition.js\";\nimport React from 'react';\nimport Moment from 'react-moment';\nimport { connect } from 'react-redux';\nimport FavoritesButton from './FavoritesButton';\nimport SearchForm from '../components/SearchForm';\n\nconst CurrentCondition = ({\n  city,\n  currentCityCondition,\n  favorites,\n  fetchErr\n}) => {\n  let content;\n\n  if (fetchErr) {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(\"../images/error.png\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 15\n      }\n    }, \"We are sorry, a mistake occured\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 15\n      }\n    }, \"You might have exceeded the API call or your connection has a problem.\"));\n  } else if (currentCityCondition) {\n    const {\n      Temperature,\n      LocalObservationDateTime,\n      WeatherText: status,\n      WeatherIcon\n    } = currentCityCondition[0];\n    content = /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-box\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SearchForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"current-condition-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }, city.cityName), /*#__PURE__*/React.createElement(FavoritesButton, {\n      isFavorite: favorites.some(fav => fav.id === city.id),\n      city: city,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Moment, {\n      format: \"dddd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, LocalObservationDateTime), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 72\n      }\n    }), /*#__PURE__*/React.createElement(Moment, {\n      format: \"LL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, LocalObservationDateTime)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right-side\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"temp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    }, Temperature.Metric.Value, \"\\xB0C \")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(`../images/weather-icons/${WeatherIcon}.png`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"state\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, \" \", status, \" \"))))));\n  } else content = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 18\n    }\n  }, \"Loading...\");\n\n  return content;\n};\n\nconst mapStateToProps = state => ({\n  city: state.currentWeather.currentCity,\n  currentCityCondition: state.currentWeather.currentCondition,\n  fetchErr: state.currentWeather.fetchErr,\n  favorites: state.favorites.favesList\n});\n\nexport default connect(mapStateToProps)(CurrentCondition);","map":{"version":3,"sources":["/Users/yohav/Desktop/HeroloAssignement/src/components/CurrentCondition.js"],"names":["React","Moment","connect","FavoritesButton","SearchForm","CurrentCondition","city","currentCityCondition","favorites","fetchErr","content","require","Temperature","LocalObservationDateTime","WeatherText","status","WeatherIcon","cityName","some","fav","id","Metric","Value","mapStateToProps","state","currentWeather","currentCity","currentCondition","favesList"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Moment from 'react-moment';\nimport { connect } from 'react-redux';\n\n\nimport FavoritesButton from './FavoritesButton';\nimport SearchForm from '../components/SearchForm';\n\nconst CurrentCondition = ({ city, currentCityCondition, favorites, fetchErr }) => {\n\n  let content;\n  if (fetchErr) {\n    content = <div className=\"error\">\n              <img src={require(\"../images/error.png\")} />\n              <h1>We are sorry, a mistake occured</h1>\n              <p>You might have exceeded the API call or your connection has a problem.</p>\n              </div>;\n  }\n  else if (currentCityCondition) {\n    const { Temperature, LocalObservationDateTime, WeatherText: status ,WeatherIcon} = currentCityCondition[0];\n    content = (\n      <React.Fragment>\n        <div className=\"current-condition\">\n          <div className=\"search-box\">\n            <SearchForm />\n          </div>\n          <div className=\"current-condition-info\">\n            <div className=\"left-side\">\n              <div className=\"city\">\n                <span>{city.cityName}</span>\n                <FavoritesButton\n                  isFavorite={favorites.some(fav => fav.id === city.id)}\n                  city={city}\n                />\n              </div>\n              <Moment format='dddd'>{LocalObservationDateTime}</Moment><br></br>\n              <Moment format='LL'>{LocalObservationDateTime}</Moment>\n            </div>\n            <div className=\"right-side\">\n              <div>\n                <span className=\"temp\">{Temperature.Metric.Value}°C </span>\n              </div>\n              <div>\n                <img src={require(`../images/weather-icons/${WeatherIcon}.png`)} />\n                <span className=\"state\"> {status} </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n  else content = <div className=\"loading\">Loading...</div>;\n\n  return content;\n}\n\n\nconst mapStateToProps = state => ({\n  city: state.currentWeather.currentCity,\n  currentCityCondition: state.currentWeather.currentCondition,\n  fetchErr: state.currentWeather.fetchErr,\n  favorites: state.favorites.favesList\n});\n\n\nexport default connect(mapStateToProps)(CurrentCondition);\n"]},"metadata":{},"sourceType":"module"}