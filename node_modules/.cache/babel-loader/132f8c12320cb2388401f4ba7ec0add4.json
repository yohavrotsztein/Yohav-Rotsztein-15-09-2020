{"ast":null,"code":"import { getCurrentWeather, getForecast } from '../../API';\nconst actionTypes = {\n  FETCH_WEATHER_SUCCESS: 'FETCH_WEATHER_SUCCESS',\n  SET_CURRENT_CITY: 'SET_CURRENT_CITY',\n  FETCH_FORECAST_SUCCESS: 'FETCH_FORECAST_SUCCESS',\n  SET_FETCH_ERR: 'SET_FETCH_ERR'\n};\n\nconst setCurrentCity = payload => ({\n  type: actionTypes.SET_CURRENT_CITY,\n  payload\n});\n\nconst fetchWeatherSucces = payload => ({\n  type: actionTypes.FETCH_WEATHER_SUCCESS,\n  payload\n});\n\nconst fetchForecastSucces = payload => ({\n  type: actionTypes.FETCH_FORECAST_SUCCESS,\n  payload\n});\n\nconst setfetchErr = payload => ({\n  type: actionTypes.SET_FETCH_ERR,\n  payload\n});\n\nexport const fetchWeatherAndForecast = city => {\n  return dispatch => {\n    dispatch(setCurrentCity(city)); // fetch weather and forecast parallel\n\n    Promise.all([getCurrentWeather(city.id), getForecast(city.id)]).then(responses => {\n      dispatch(setfetchErr(null));\n      dispatch(fetchWeatherSucces(responses[0].data));\n      dispatch(fetchForecastSucces(responses[1].data.DailyForecasts));\n      console.log(responses);\n    }).catch(err => dispatch(setfetchErr(err)));\n  };\n};","map":{"version":3,"sources":["/Users/yohav/Desktop/HeroloAssignement/src/store/actions/currentWeather.actions.js"],"names":["getCurrentWeather","getForecast","actionTypes","FETCH_WEATHER_SUCCESS","SET_CURRENT_CITY","FETCH_FORECAST_SUCCESS","SET_FETCH_ERR","setCurrentCity","payload","type","fetchWeatherSucces","fetchForecastSucces","setfetchErr","fetchWeatherAndForecast","city","dispatch","Promise","all","id","then","responses","data","DailyForecasts","console","log","catch","err"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,WAA5B,QAA+C,WAA/C;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,qBAAqB,EAAE,uBADL;AAElBC,EAAAA,gBAAgB,EAAE,kBAFA;AAGlBC,EAAAA,sBAAsB,EAAE,wBAHN;AAIlBC,EAAAA,aAAa,EAAE;AAJG,CAApB;;AAOA,MAAMC,cAAc,GAAGC,OAAO,KAAK;AACjCC,EAAAA,IAAI,EAAEP,WAAW,CAACE,gBADe;AAEjCI,EAAAA;AAFiC,CAAL,CAA9B;;AAMA,MAAME,kBAAkB,GAAGF,OAAO,KAAK;AACrCC,EAAAA,IAAI,EAAEP,WAAW,CAACC,qBADmB;AAErCK,EAAAA;AAFqC,CAAL,CAAlC;;AAMA,MAAMG,mBAAmB,GAAGH,OAAO,KAAK;AACtCC,EAAAA,IAAI,EAAEP,WAAW,CAACG,sBADoB;AAEtCG,EAAAA;AAFsC,CAAL,CAAnC;;AAKA,MAAMI,WAAW,GAAGJ,OAAO,KAAK;AAC9BC,EAAAA,IAAI,EAAEP,WAAW,CAACI,aADY;AAE9BE,EAAAA;AAF8B,CAAL,CAA3B;;AAMA,OAAO,MAAMK,uBAAuB,GAAGC,IAAI,IAAI;AAC7C,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACR,cAAc,CAACO,IAAD,CAAf,CAAR,CADiB,CAGjB;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,CACVjB,iBAAiB,CAACc,IAAI,CAACI,EAAN,CADP,EAEVjB,WAAW,CAACa,IAAI,CAACI,EAAN,CAFD,CAAZ,EAGGC,IAHH,CAGQC,SAAS,IAAI;AACnBL,MAAAA,QAAQ,CAACH,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAG,MAAAA,QAAQ,CAACL,kBAAkB,CAACU,SAAS,CAAC,CAAD,CAAT,CAAaC,IAAd,CAAnB,CAAR;AACAN,MAAAA,QAAQ,CAACJ,mBAAmB,CAACS,SAAS,CAAC,CAAD,CAAT,CAAaC,IAAb,CAAkBC,cAAnB,CAApB,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACD,KARD,EASGK,KATH,CASSC,GAAG,IAAIX,QAAQ,CAACH,WAAW,CAACc,GAAD,CAAZ,CATxB;AAUD,GAdD;AAeD,CAhBM","sourcesContent":["import { getCurrentWeather, getForecast } from '../../API';\n\nconst actionTypes = {\n  FETCH_WEATHER_SUCCESS: 'FETCH_WEATHER_SUCCESS',\n  SET_CURRENT_CITY: 'SET_CURRENT_CITY',\n  FETCH_FORECAST_SUCCESS: 'FETCH_FORECAST_SUCCESS',\n  SET_FETCH_ERR: 'SET_FETCH_ERR',\n}\n\nconst setCurrentCity = payload => ({\n  type: actionTypes.SET_CURRENT_CITY,\n  payload\n});\n\n\nconst fetchWeatherSucces = payload => ({\n  type: actionTypes.FETCH_WEATHER_SUCCESS,\n  payload\n});\n\n\nconst fetchForecastSucces = payload => ({\n  type: actionTypes.FETCH_FORECAST_SUCCESS,\n  payload\n});\n\nconst setfetchErr = payload => ({\n  type: actionTypes.SET_FETCH_ERR,\n  payload\n});\n\n\nexport const fetchWeatherAndForecast = city => {\n  return dispatch => {\n    dispatch(setCurrentCity(city));\n\n    // fetch weather and forecast parallel\n    Promise.all([\n      getCurrentWeather(city.id),\n      getForecast(city.id)\n    ]).then(responses => {\n      dispatch(setfetchErr(null));\n      dispatch(fetchWeatherSucces(responses[0].data))\n      dispatch(fetchForecastSucces(responses[1].data.DailyForecasts))\n      console.log(responses)\n    })\n      .catch(err => dispatch(setfetchErr(err)));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}